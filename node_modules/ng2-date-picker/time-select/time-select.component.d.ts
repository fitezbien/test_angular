import { ECalendarValue } from '../common/types/calendar-value-enum';
import { SingleCalendarValue } from '../common/types/single-calendar-value';
import { ChangeDetectorRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { TimeSelectService, TimeUnit } from './time-select.service';
import { Moment } from 'moment';
import { ITimeSelectConfig, ITimeSelectConfigInternal } from './time-select-config.model';
import { ControlValueAccessor, FormControl, ValidationErrors, Validator } from '@angular/forms';
import { CalendarValue } from '../common/types/calendar-value';
import { UtilsService } from '../common/services/utils/utils.service';
import { IDate } from '../common/models/date.model';
import { DateValidator } from '../common/types/validator.type';
import * as ɵngcc0 from '@angular/core';
export declare class TimeSelectComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {
    timeSelectService: TimeSelectService;
    utilsService: UtilsService;
    cd: ChangeDetectorRef;
    selected: Moment;
    config: ITimeSelectConfig;
    displayDate: SingleCalendarValue;
    minDate: SingleCalendarValue;
    maxDate: SingleCalendarValue;
    minTime: SingleCalendarValue;
    maxTime: SingleCalendarValue;
    theme: string;
    onChange: EventEmitter<IDate>;
    isInited: boolean;
    componentConfig: ITimeSelectConfigInternal;
    inputValue: CalendarValue;
    inputValueType: ECalendarValue;
    validateFn: DateValidator;
    hours: string;
    minutes: string;
    seconds: string;
    meridiem: string;
    showDecHour: boolean;
    showDecMinute: boolean;
    showDecSecond: boolean;
    showIncHour: boolean;
    showIncMinute: boolean;
    showIncSecond: boolean;
    showToggleMeridiem: boolean;
    api: {
        triggerChange: any;
    };
    _selected: Moment;
    constructor(timeSelectService: TimeSelectService, utilsService: UtilsService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    init(): void;
    ngOnChanges(changes: SimpleChanges): void;
    writeValue(value: CalendarValue): void;
    registerOnChange(fn: any): void;
    onChangeCallback(_: any): void;
    registerOnTouched(fn: any): void;
    validate(formControl: FormControl): ValidationErrors | any;
    processOnChangeCallback(value: Moment): CalendarValue;
    initValidators(): void;
    decrease(unit: TimeUnit): void;
    increase(unit: TimeUnit): void;
    toggleMeridiem(): void;
    emitChange(): void;
    calculateTimeParts(time: Moment): void;
    private handleConfigChange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TimeSelectComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TimeSelectComponent, "dp-time-select", never, {
    "config": "config";
    "displayDate": "displayDate";
    "minDate": "minDate";
    "maxDate": "maxDate";
    "minTime": "minTime";
    "maxTime": "maxTime";
    "theme": "theme";
}, {
    "onChange": "onChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1zZWxlY3QuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRpbWUtc2VsZWN0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUFXQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrREEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFQ2FsZW5kYXJWYWx1ZSB9IGZyb20gJy4uL2NvbW1vbi90eXBlcy9jYWxlbmRhci12YWx1ZS1lbnVtJztcbmltcG9ydCB7IFNpbmdsZUNhbGVuZGFyVmFsdWUgfSBmcm9tICcuLi9jb21tb24vdHlwZXMvc2luZ2xlLWNhbGVuZGFyLXZhbHVlJztcbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaW1lU2VsZWN0U2VydmljZSwgVGltZVVuaXQgfSBmcm9tICcuL3RpbWUtc2VsZWN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgTW9tZW50IH0gZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IElUaW1lU2VsZWN0Q29uZmlnLCBJVGltZVNlbGVjdENvbmZpZ0ludGVybmFsIH0gZnJvbSAnLi90aW1lLXNlbGVjdC1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIEZvcm1Db250cm9sLCBWYWxpZGF0aW9uRXJyb3JzLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDYWxlbmRhclZhbHVlIH0gZnJvbSAnLi4vY29tbW9uL3R5cGVzL2NhbGVuZGFyLXZhbHVlJztcbmltcG9ydCB7IFV0aWxzU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9zZXJ2aWNlcy91dGlscy91dGlscy5zZXJ2aWNlJztcbmltcG9ydCB7IElEYXRlIH0gZnJvbSAnLi4vY29tbW9uL21vZGVscy9kYXRlLm1vZGVsJztcbmltcG9ydCB7IERhdGVWYWxpZGF0b3IgfSBmcm9tICcuLi9jb21tb24vdHlwZXMvdmFsaWRhdG9yLnR5cGUnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGltZVNlbGVjdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yIHtcbiAgICB0aW1lU2VsZWN0U2VydmljZTogVGltZVNlbGVjdFNlcnZpY2U7XG4gICAgdXRpbHNTZXJ2aWNlOiBVdGlsc1NlcnZpY2U7XG4gICAgY2Q6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIHNlbGVjdGVkOiBNb21lbnQ7XG4gICAgY29uZmlnOiBJVGltZVNlbGVjdENvbmZpZztcbiAgICBkaXNwbGF5RGF0ZTogU2luZ2xlQ2FsZW5kYXJWYWx1ZTtcbiAgICBtaW5EYXRlOiBTaW5nbGVDYWxlbmRhclZhbHVlO1xuICAgIG1heERhdGU6IFNpbmdsZUNhbGVuZGFyVmFsdWU7XG4gICAgbWluVGltZTogU2luZ2xlQ2FsZW5kYXJWYWx1ZTtcbiAgICBtYXhUaW1lOiBTaW5nbGVDYWxlbmRhclZhbHVlO1xuICAgIHRoZW1lOiBzdHJpbmc7XG4gICAgb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxJRGF0ZT47XG4gICAgaXNJbml0ZWQ6IGJvb2xlYW47XG4gICAgY29tcG9uZW50Q29uZmlnOiBJVGltZVNlbGVjdENvbmZpZ0ludGVybmFsO1xuICAgIGlucHV0VmFsdWU6IENhbGVuZGFyVmFsdWU7XG4gICAgaW5wdXRWYWx1ZVR5cGU6IEVDYWxlbmRhclZhbHVlO1xuICAgIHZhbGlkYXRlRm46IERhdGVWYWxpZGF0b3I7XG4gICAgaG91cnM6IHN0cmluZztcbiAgICBtaW51dGVzOiBzdHJpbmc7XG4gICAgc2Vjb25kczogc3RyaW5nO1xuICAgIG1lcmlkaWVtOiBzdHJpbmc7XG4gICAgc2hvd0RlY0hvdXI6IGJvb2xlYW47XG4gICAgc2hvd0RlY01pbnV0ZTogYm9vbGVhbjtcbiAgICBzaG93RGVjU2Vjb25kOiBib29sZWFuO1xuICAgIHNob3dJbmNIb3VyOiBib29sZWFuO1xuICAgIHNob3dJbmNNaW51dGU6IGJvb2xlYW47XG4gICAgc2hvd0luY1NlY29uZDogYm9vbGVhbjtcbiAgICBzaG93VG9nZ2xlTWVyaWRpZW06IGJvb2xlYW47XG4gICAgYXBpOiB7XG4gICAgICAgIHRyaWdnZXJDaGFuZ2U6IGFueTtcbiAgICB9O1xuICAgIF9zZWxlY3RlZDogTW9tZW50O1xuICAgIGNvbnN0cnVjdG9yKHRpbWVTZWxlY3RTZXJ2aWNlOiBUaW1lU2VsZWN0U2VydmljZSwgdXRpbHNTZXJ2aWNlOiBVdGlsc1NlcnZpY2UsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBpbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogQ2FsZW5kYXJWYWx1ZSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICBvbkNoYW5nZUNhbGxiYWNrKF86IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgdmFsaWRhdGUoZm9ybUNvbnRyb2w6IEZvcm1Db250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IGFueTtcbiAgICBwcm9jZXNzT25DaGFuZ2VDYWxsYmFjayh2YWx1ZTogTW9tZW50KTogQ2FsZW5kYXJWYWx1ZTtcbiAgICBpbml0VmFsaWRhdG9ycygpOiB2b2lkO1xuICAgIGRlY3JlYXNlKHVuaXQ6IFRpbWVVbml0KTogdm9pZDtcbiAgICBpbmNyZWFzZSh1bml0OiBUaW1lVW5pdCk6IHZvaWQ7XG4gICAgdG9nZ2xlTWVyaWRpZW0oKTogdm9pZDtcbiAgICBlbWl0Q2hhbmdlKCk6IHZvaWQ7XG4gICAgY2FsY3VsYXRlVGltZVBhcnRzKHRpbWU6IE1vbWVudCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBoYW5kbGVDb25maWdDaGFuZ2U7XG59XG4iXX0=