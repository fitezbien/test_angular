import { ECalendarValue } from '../common/types/calendar-value-enum';
import { ChangeDetectorRef, EventEmitter, OnChanges, OnInit, SimpleChange, SimpleChanges } from '@angular/core';
import { IMonth } from './month.model';
import { MonthCalendarService } from './month-calendar.service';
import { Moment } from 'moment';
import { IMonthCalendarConfig, IMonthCalendarConfigInternal } from './month-calendar-config';
import { ControlValueAccessor, FormControl, ValidationErrors, Validator } from '@angular/forms';
import { CalendarValue } from '../common/types/calendar-value';
import { UtilsService } from '../common/services/utils/utils.service';
import { DateValidator } from '../common/types/validator.type';
import { SingleCalendarValue } from '../common/types/single-calendar-value';
import { INavEvent } from '../common/models/navigation-event.model';
import * as ɵngcc0 from '@angular/core';
export declare class MonthCalendarComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {
    readonly monthCalendarService: MonthCalendarService;
    readonly utilsService: UtilsService;
    readonly cd: ChangeDetectorRef;
    selected: Moment[];
    currentDateView: Moment;
    config: IMonthCalendarConfig;
    displayDate: Moment;
    minDate: Moment;
    maxDate: Moment;
    theme: string;
    onSelect: EventEmitter<IMonth>;
    onNavHeaderBtnClick: EventEmitter<null>;
    onGoToCurrent: EventEmitter<void>;
    onLeftNav: EventEmitter<INavEvent>;
    onRightNav: EventEmitter<INavEvent>;
    onLeftSecondaryNav: EventEmitter<INavEvent>;
    onRightSecondaryNav: EventEmitter<INavEvent>;
    isInited: boolean;
    componentConfig: IMonthCalendarConfigInternal;
    yearMonths: IMonth[][];
    inputValue: CalendarValue;
    inputValueType: ECalendarValue;
    validateFn: DateValidator;
    _shouldShowCurrent: boolean;
    navLabel: string;
    showLeftNav: boolean;
    showRightNav: boolean;
    showSecondaryLeftNav: boolean;
    showSecondaryRightNav: boolean;
    api: {
        toggleCalendar: any;
        moveCalendarTo: any;
    };
    _selected: Moment[];
    _currentDateView: Moment;
    constructor(monthCalendarService: MonthCalendarService, utilsService: UtilsService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    init(): void;
    writeValue(value: CalendarValue): void;
    registerOnChange(fn: any): void;
    onChangeCallback(_: any): void;
    registerOnTouched(fn: any): void;
    validate(formControl: FormControl): ValidationErrors | any;
    processOnChangeCallback(value: Moment[]): CalendarValue;
    initValidators(): void;
    monthClicked(month: IMonth): void;
    onLeftNavClick(): void;
    onLeftSecondaryNavClick(): void;
    onRightNavClick(): void;
    onRightSecondaryNavClick(): void;
    toggleCalendarMode(): void;
    getMonthBtnCssClass(month: IMonth): {
        [klass: string]: boolean;
    };
    shouldShowCurrent(): boolean;
    goToCurrent(): void;
    moveCalendarTo(to: SingleCalendarValue): void;
    handleConfigChange(config: SimpleChange): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MonthCalendarComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MonthCalendarComponent, "dp-month-calendar", never, {
    "config": "config";
    "displayDate": "displayDate";
    "minDate": "minDate";
    "maxDate": "maxDate";
    "theme": "theme";
}, {
    "onSelect": "onSelect";
    "onNavHeaderBtnClick": "onNavHeaderBtnClick";
    "onGoToCurrent": "onGoToCurrent";
    "onLeftNav": "onLeftNav";
    "onRightNav": "onRightNav";
    "onLeftSecondaryNav": "onLeftSecondaryNav";
    "onRightSecondaryNav": "onRightSecondaryNav";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGgtY2FsZW5kYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm1vbnRoLWNhbGVuZGFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFQ2FsZW5kYXJWYWx1ZSB9IGZyb20gJy4uL2NvbW1vbi90eXBlcy9jYWxlbmRhci12YWx1ZS1lbnVtJztcbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2UsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElNb250aCB9IGZyb20gJy4vbW9udGgubW9kZWwnO1xuaW1wb3J0IHsgTW9udGhDYWxlbmRhclNlcnZpY2UgfSBmcm9tICcuL21vbnRoLWNhbGVuZGFyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTW9tZW50IH0gZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IElNb250aENhbGVuZGFyQ29uZmlnLCBJTW9udGhDYWxlbmRhckNvbmZpZ0ludGVybmFsIH0gZnJvbSAnLi9tb250aC1jYWxlbmRhci1jb25maWcnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIEZvcm1Db250cm9sLCBWYWxpZGF0aW9uRXJyb3JzLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDYWxlbmRhclZhbHVlIH0gZnJvbSAnLi4vY29tbW9uL3R5cGVzL2NhbGVuZGFyLXZhbHVlJztcbmltcG9ydCB7IFV0aWxzU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9zZXJ2aWNlcy91dGlscy91dGlscy5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGVWYWxpZGF0b3IgfSBmcm9tICcuLi9jb21tb24vdHlwZXMvdmFsaWRhdG9yLnR5cGUnO1xuaW1wb3J0IHsgU2luZ2xlQ2FsZW5kYXJWYWx1ZSB9IGZyb20gJy4uL2NvbW1vbi90eXBlcy9zaW5nbGUtY2FsZW5kYXItdmFsdWUnO1xuaW1wb3J0IHsgSU5hdkV2ZW50IH0gZnJvbSAnLi4vY29tbW9uL21vZGVscy9uYXZpZ2F0aW9uLWV2ZW50Lm1vZGVsJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1vbnRoQ2FsZW5kYXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB7XG4gICAgcmVhZG9ubHkgbW9udGhDYWxlbmRhclNlcnZpY2U6IE1vbnRoQ2FsZW5kYXJTZXJ2aWNlO1xuICAgIHJlYWRvbmx5IHV0aWxzU2VydmljZTogVXRpbHNTZXJ2aWNlO1xuICAgIHJlYWRvbmx5IGNkOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBzZWxlY3RlZDogTW9tZW50W107XG4gICAgY3VycmVudERhdGVWaWV3OiBNb21lbnQ7XG4gICAgY29uZmlnOiBJTW9udGhDYWxlbmRhckNvbmZpZztcbiAgICBkaXNwbGF5RGF0ZTogTW9tZW50O1xuICAgIG1pbkRhdGU6IE1vbWVudDtcbiAgICBtYXhEYXRlOiBNb21lbnQ7XG4gICAgdGhlbWU6IHN0cmluZztcbiAgICBvblNlbGVjdDogRXZlbnRFbWl0dGVyPElNb250aD47XG4gICAgb25OYXZIZWFkZXJCdG5DbGljazogRXZlbnRFbWl0dGVyPG51bGw+O1xuICAgIG9uR29Ub0N1cnJlbnQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBvbkxlZnROYXY6IEV2ZW50RW1pdHRlcjxJTmF2RXZlbnQ+O1xuICAgIG9uUmlnaHROYXY6IEV2ZW50RW1pdHRlcjxJTmF2RXZlbnQ+O1xuICAgIG9uTGVmdFNlY29uZGFyeU5hdjogRXZlbnRFbWl0dGVyPElOYXZFdmVudD47XG4gICAgb25SaWdodFNlY29uZGFyeU5hdjogRXZlbnRFbWl0dGVyPElOYXZFdmVudD47XG4gICAgaXNJbml0ZWQ6IGJvb2xlYW47XG4gICAgY29tcG9uZW50Q29uZmlnOiBJTW9udGhDYWxlbmRhckNvbmZpZ0ludGVybmFsO1xuICAgIHllYXJNb250aHM6IElNb250aFtdW107XG4gICAgaW5wdXRWYWx1ZTogQ2FsZW5kYXJWYWx1ZTtcbiAgICBpbnB1dFZhbHVlVHlwZTogRUNhbGVuZGFyVmFsdWU7XG4gICAgdmFsaWRhdGVGbjogRGF0ZVZhbGlkYXRvcjtcbiAgICBfc2hvdWxkU2hvd0N1cnJlbnQ6IGJvb2xlYW47XG4gICAgbmF2TGFiZWw6IHN0cmluZztcbiAgICBzaG93TGVmdE5hdjogYm9vbGVhbjtcbiAgICBzaG93UmlnaHROYXY6IGJvb2xlYW47XG4gICAgc2hvd1NlY29uZGFyeUxlZnROYXY6IGJvb2xlYW47XG4gICAgc2hvd1NlY29uZGFyeVJpZ2h0TmF2OiBib29sZWFuO1xuICAgIGFwaToge1xuICAgICAgICB0b2dnbGVDYWxlbmRhcjogYW55O1xuICAgICAgICBtb3ZlQ2FsZW5kYXJUbzogYW55O1xuICAgIH07XG4gICAgX3NlbGVjdGVkOiBNb21lbnRbXTtcbiAgICBfY3VycmVudERhdGVWaWV3OiBNb21lbnQ7XG4gICAgY29uc3RydWN0b3IobW9udGhDYWxlbmRhclNlcnZpY2U6IE1vbnRoQ2FsZW5kYXJTZXJ2aWNlLCB1dGlsc1NlcnZpY2U6IFV0aWxzU2VydmljZSwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIGluaXQoKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBDYWxlbmRhclZhbHVlKTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIG9uQ2hhbmdlQ2FsbGJhY2soXzogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICB2YWxpZGF0ZShmb3JtQ29udHJvbDogRm9ybUNvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgYW55O1xuICAgIHByb2Nlc3NPbkNoYW5nZUNhbGxiYWNrKHZhbHVlOiBNb21lbnRbXSk6IENhbGVuZGFyVmFsdWU7XG4gICAgaW5pdFZhbGlkYXRvcnMoKTogdm9pZDtcbiAgICBtb250aENsaWNrZWQobW9udGg6IElNb250aCk6IHZvaWQ7XG4gICAgb25MZWZ0TmF2Q2xpY2soKTogdm9pZDtcbiAgICBvbkxlZnRTZWNvbmRhcnlOYXZDbGljaygpOiB2b2lkO1xuICAgIG9uUmlnaHROYXZDbGljaygpOiB2b2lkO1xuICAgIG9uUmlnaHRTZWNvbmRhcnlOYXZDbGljaygpOiB2b2lkO1xuICAgIHRvZ2dsZUNhbGVuZGFyTW9kZSgpOiB2b2lkO1xuICAgIGdldE1vbnRoQnRuQ3NzQ2xhc3MobW9udGg6IElNb250aCk6IHtcbiAgICAgICAgW2tsYXNzOiBzdHJpbmddOiBib29sZWFuO1xuICAgIH07XG4gICAgc2hvdWxkU2hvd0N1cnJlbnQoKTogYm9vbGVhbjtcbiAgICBnb1RvQ3VycmVudCgpOiB2b2lkO1xuICAgIG1vdmVDYWxlbmRhclRvKHRvOiBTaW5nbGVDYWxlbmRhclZhbHVlKTogdm9pZDtcbiAgICBoYW5kbGVDb25maWdDaGFuZ2UoY29uZmlnOiBTaW1wbGVDaGFuZ2UpOiB2b2lkO1xufVxuIl19