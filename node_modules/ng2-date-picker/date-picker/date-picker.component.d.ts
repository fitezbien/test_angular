import { IDate } from '../common/models/date.model';
import { DomHelper } from '../common/services/dom-appender/dom-appender.service';
import { UtilsService } from '../common/services/utils/utils.service';
import { CalendarMode } from '../common/types/calendar-mode';
import { CalendarValue } from '../common/types/calendar-value';
import { SingleCalendarValue } from '../common/types/single-calendar-value';
import { IDayCalendarConfig } from '../day-calendar/day-calendar-config.model';
import { DayCalendarComponent } from '../day-calendar/day-calendar.component';
import { IDayTimeCalendarConfig } from '../day-time-calendar/day-time-calendar-config.model';
import { ITimeSelectConfig } from '../time-select/time-select-config.model';
import { TimeSelectComponent } from '../time-select/time-select.component';
import { IDatePickerConfig, IDatePickerConfigInternal } from './date-picker-config.model';
import { IDpDayPickerApi } from './date-picker.api';
import { DatePickerService } from './date-picker.service';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, FormControl, ValidationErrors, Validator } from '@angular/forms';
import { Moment, unitOfTime } from 'moment';
import { DateValidator } from '../common/types/validator.type';
import { MonthCalendarComponent } from '../month-calendar/month-calendar.component';
import { DayTimeCalendarComponent } from '../day-time-calendar/day-time-calendar.component';
import { INavEvent } from '../common/models/navigation-event.model';
import { SelectEvent } from '../common/types/selection-evet.enum.';
import { ISelectionEvent } from '../common/types/selection-evet.model';
import * as ɵngcc0 from '@angular/core';
export declare class DatePickerComponent implements OnChanges, OnInit, AfterViewInit, ControlValueAccessor, Validator, OnDestroy {
    private readonly dayPickerService;
    private readonly domHelper;
    private readonly elemRef;
    private readonly renderer;
    private readonly utilsService;
    readonly cd: ChangeDetectorRef;
    readonly openOnFocus: boolean;
    readonly openOnClick: boolean;
    areCalendarsShown: boolean;
    selected: Moment[];
    currentDateView: Moment;
    isInitialized: boolean;
    config: IDatePickerConfig;
    mode: CalendarMode;
    placeholder: string;
    disabled: boolean;
    displayDate: SingleCalendarValue;
    theme: string;
    minDate: SingleCalendarValue;
    maxDate: SingleCalendarValue;
    minTime: SingleCalendarValue;
    maxTime: SingleCalendarValue;
    open: EventEmitter<void>;
    close: EventEmitter<void>;
    onChange: EventEmitter<CalendarValue>;
    onGoToCurrent: EventEmitter<void>;
    onLeftNav: EventEmitter<INavEvent>;
    onRightNav: EventEmitter<INavEvent>;
    onSelect: EventEmitter<ISelectionEvent>;
    calendarContainer: ElementRef;
    dayCalendarRef: DayCalendarComponent;
    monthCalendarRef: MonthCalendarComponent;
    dayTimeCalendarRef: DayTimeCalendarComponent;
    timeSelectRef: TimeSelectComponent;
    componentConfig: IDatePickerConfigInternal;
    dayCalendarConfig: IDayCalendarConfig;
    dayTimeCalendarConfig: IDayTimeCalendarConfig;
    timeSelectConfig: ITimeSelectConfig;
    hideStateHelper: boolean;
    inputValue: CalendarValue;
    isFocusedTrigger: boolean;
    inputElementValue: string;
    calendarWrapper: HTMLElement;
    appendToElement: HTMLElement;
    inputElementContainer: HTMLElement;
    popupElem: HTMLElement;
    handleInnerElementClickUnlisteners: Function[];
    globalListenersUnlisteners: Function[];
    validateFn: DateValidator;
    api: IDpDayPickerApi;
    selectEvent: typeof SelectEvent;
    _areCalendarsShown: boolean;
    _selected: Moment[];
    _currentDateView: Moment;
    constructor(dayPickerService: DatePickerService, domHelper: DomHelper, elemRef: ElementRef, renderer: Renderer2, utilsService: UtilsService, cd: ChangeDetectorRef);
    onClick(): void;
    onBodyClick(): void;
    onScroll(): void;
    writeValue(value: CalendarValue): void;
    registerOnChange(fn: any): void;
    onChangeCallback(_: any, changedByInput: boolean): void;
    registerOnTouched(fn: any): void;
    onTouchedCallback(): void;
    validate(formControl: FormControl): ValidationErrors;
    processOnChangeCallback(selected: Moment[] | string): CalendarValue;
    initValidators(): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    setDisabledState(isDisabled: boolean): void;
    setElementPositionInDom(): void;
    setInputElementContainer(): void;
    handleInnerElementClick(element: HTMLElement): void;
    init(): void;
    inputFocused(): void;
    inputBlurred(): void;
    showCalendars(): void;
    hideCalendar(): void;
    onViewDateChange(value: CalendarValue): void;
    dateSelected(date: IDate, granularity: unitOfTime.Base, type: SelectEvent, ignoreClose?: boolean): void;
    onDateClick(): void;
    onKeyPress(event: KeyboardEvent): void;
    moveCalendarTo(date: SingleCalendarValue): void;
    onLeftNavClick(change: INavEvent): void;
    onRightNavClick(change: INavEvent): void;
    startGlobalListeners(): void;
    stopGlobalListeners(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePickerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DatePickerComponent, "dp-date-picker", never, {
    "mode": "mode";
    "placeholder": "placeholder";
    "disabled": "disabled";
    "config": "config";
    "displayDate": "displayDate";
    "theme": "theme";
    "minDate": "minDate";
    "maxDate": "maxDate";
    "minTime": "minTime";
    "maxTime": "maxTime";
}, {
    "open": "open";
    "close": "close";
    "onChange": "onChange";
    "onGoToCurrent": "onGoToCurrent";
    "onLeftNav": "onLeftNav";
    "onRightNav": "onRightNav";
    "onSelect": "onSelect";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImRhdGUtcGlja2VyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUZBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSURhdGUgfSBmcm9tICcuLi9jb21tb24vbW9kZWxzL2RhdGUubW9kZWwnO1xuaW1wb3J0IHsgRG9tSGVscGVyIH0gZnJvbSAnLi4vY29tbW9uL3NlcnZpY2VzL2RvbS1hcHBlbmRlci9kb20tYXBwZW5kZXIuc2VydmljZSc7XG5pbXBvcnQgeyBVdGlsc1NlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vc2VydmljZXMvdXRpbHMvdXRpbHMuc2VydmljZSc7XG5pbXBvcnQgeyBDYWxlbmRhck1vZGUgfSBmcm9tICcuLi9jb21tb24vdHlwZXMvY2FsZW5kYXItbW9kZSc7XG5pbXBvcnQgeyBDYWxlbmRhclZhbHVlIH0gZnJvbSAnLi4vY29tbW9uL3R5cGVzL2NhbGVuZGFyLXZhbHVlJztcbmltcG9ydCB7IFNpbmdsZUNhbGVuZGFyVmFsdWUgfSBmcm9tICcuLi9jb21tb24vdHlwZXMvc2luZ2xlLWNhbGVuZGFyLXZhbHVlJztcbmltcG9ydCB7IElEYXlDYWxlbmRhckNvbmZpZyB9IGZyb20gJy4uL2RheS1jYWxlbmRhci9kYXktY2FsZW5kYXItY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IERheUNhbGVuZGFyQ29tcG9uZW50IH0gZnJvbSAnLi4vZGF5LWNhbGVuZGFyL2RheS1jYWxlbmRhci5jb21wb25lbnQnO1xuaW1wb3J0IHsgSURheVRpbWVDYWxlbmRhckNvbmZpZyB9IGZyb20gJy4uL2RheS10aW1lLWNhbGVuZGFyL2RheS10aW1lLWNhbGVuZGFyLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBJVGltZVNlbGVjdENvbmZpZyB9IGZyb20gJy4uL3RpbWUtc2VsZWN0L3RpbWUtc2VsZWN0LWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBUaW1lU2VsZWN0Q29tcG9uZW50IH0gZnJvbSAnLi4vdGltZS1zZWxlY3QvdGltZS1zZWxlY3QuY29tcG9uZW50JztcbmltcG9ydCB7IElEYXRlUGlja2VyQ29uZmlnLCBJRGF0ZVBpY2tlckNvbmZpZ0ludGVybmFsIH0gZnJvbSAnLi9kYXRlLXBpY2tlci1jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgSURwRGF5UGlja2VyQXBpIH0gZnJvbSAnLi9kYXRlLXBpY2tlci5hcGknO1xuaW1wb3J0IHsgRGF0ZVBpY2tlclNlcnZpY2UgfSBmcm9tICcuL2RhdGUtcGlja2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgRm9ybUNvbnRyb2wsIFZhbGlkYXRpb25FcnJvcnMsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE1vbWVudCwgdW5pdE9mVGltZSB9IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBEYXRlVmFsaWRhdG9yIH0gZnJvbSAnLi4vY29tbW9uL3R5cGVzL3ZhbGlkYXRvci50eXBlJztcbmltcG9ydCB7IE1vbnRoQ2FsZW5kYXJDb21wb25lbnQgfSBmcm9tICcuLi9tb250aC1jYWxlbmRhci9tb250aC1jYWxlbmRhci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF5VGltZUNhbGVuZGFyQ29tcG9uZW50IH0gZnJvbSAnLi4vZGF5LXRpbWUtY2FsZW5kYXIvZGF5LXRpbWUtY2FsZW5kYXIuY29tcG9uZW50JztcbmltcG9ydCB7IElOYXZFdmVudCB9IGZyb20gJy4uL2NvbW1vbi9tb2RlbHMvbmF2aWdhdGlvbi1ldmVudC5tb2RlbCc7XG5pbXBvcnQgeyBTZWxlY3RFdmVudCB9IGZyb20gJy4uL2NvbW1vbi90eXBlcy9zZWxlY3Rpb24tZXZldC5lbnVtLic7XG5pbXBvcnQgeyBJU2VsZWN0aW9uRXZlbnQgfSBmcm9tICcuLi9jb21tb24vdHlwZXMvc2VsZWN0aW9uLWV2ZXQubW9kZWwnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF0ZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBBZnRlclZpZXdJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGF5UGlja2VyU2VydmljZTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRvbUhlbHBlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGVsZW1SZWY7XG4gICAgcHJpdmF0ZSByZWFkb25seSByZW5kZXJlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHV0aWxzU2VydmljZTtcbiAgICByZWFkb25seSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcmVhZG9ubHkgb3Blbk9uRm9jdXM6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgb3Blbk9uQ2xpY2s6IGJvb2xlYW47XG4gICAgYXJlQ2FsZW5kYXJzU2hvd246IGJvb2xlYW47XG4gICAgc2VsZWN0ZWQ6IE1vbWVudFtdO1xuICAgIGN1cnJlbnREYXRlVmlldzogTW9tZW50O1xuICAgIGlzSW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG4gICAgY29uZmlnOiBJRGF0ZVBpY2tlckNvbmZpZztcbiAgICBtb2RlOiBDYWxlbmRhck1vZGU7XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBkaXNwbGF5RGF0ZTogU2luZ2xlQ2FsZW5kYXJWYWx1ZTtcbiAgICB0aGVtZTogc3RyaW5nO1xuICAgIG1pbkRhdGU6IFNpbmdsZUNhbGVuZGFyVmFsdWU7XG4gICAgbWF4RGF0ZTogU2luZ2xlQ2FsZW5kYXJWYWx1ZTtcbiAgICBtaW5UaW1lOiBTaW5nbGVDYWxlbmRhclZhbHVlO1xuICAgIG1heFRpbWU6IFNpbmdsZUNhbGVuZGFyVmFsdWU7XG4gICAgb3BlbjogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIGNsb3NlOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxDYWxlbmRhclZhbHVlPjtcbiAgICBvbkdvVG9DdXJyZW50OiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgb25MZWZ0TmF2OiBFdmVudEVtaXR0ZXI8SU5hdkV2ZW50PjtcbiAgICBvblJpZ2h0TmF2OiBFdmVudEVtaXR0ZXI8SU5hdkV2ZW50PjtcbiAgICBvblNlbGVjdDogRXZlbnRFbWl0dGVyPElTZWxlY3Rpb25FdmVudD47XG4gICAgY2FsZW5kYXJDb250YWluZXI6IEVsZW1lbnRSZWY7XG4gICAgZGF5Q2FsZW5kYXJSZWY6IERheUNhbGVuZGFyQ29tcG9uZW50O1xuICAgIG1vbnRoQ2FsZW5kYXJSZWY6IE1vbnRoQ2FsZW5kYXJDb21wb25lbnQ7XG4gICAgZGF5VGltZUNhbGVuZGFyUmVmOiBEYXlUaW1lQ2FsZW5kYXJDb21wb25lbnQ7XG4gICAgdGltZVNlbGVjdFJlZjogVGltZVNlbGVjdENvbXBvbmVudDtcbiAgICBjb21wb25lbnRDb25maWc6IElEYXRlUGlja2VyQ29uZmlnSW50ZXJuYWw7XG4gICAgZGF5Q2FsZW5kYXJDb25maWc6IElEYXlDYWxlbmRhckNvbmZpZztcbiAgICBkYXlUaW1lQ2FsZW5kYXJDb25maWc6IElEYXlUaW1lQ2FsZW5kYXJDb25maWc7XG4gICAgdGltZVNlbGVjdENvbmZpZzogSVRpbWVTZWxlY3RDb25maWc7XG4gICAgaGlkZVN0YXRlSGVscGVyOiBib29sZWFuO1xuICAgIGlucHV0VmFsdWU6IENhbGVuZGFyVmFsdWU7XG4gICAgaXNGb2N1c2VkVHJpZ2dlcjogYm9vbGVhbjtcbiAgICBpbnB1dEVsZW1lbnRWYWx1ZTogc3RyaW5nO1xuICAgIGNhbGVuZGFyV3JhcHBlcjogSFRNTEVsZW1lbnQ7XG4gICAgYXBwZW5kVG9FbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBpbnB1dEVsZW1lbnRDb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIHBvcHVwRWxlbTogSFRNTEVsZW1lbnQ7XG4gICAgaGFuZGxlSW5uZXJFbGVtZW50Q2xpY2tVbmxpc3RlbmVyczogRnVuY3Rpb25bXTtcbiAgICBnbG9iYWxMaXN0ZW5lcnNVbmxpc3RlbmVyczogRnVuY3Rpb25bXTtcbiAgICB2YWxpZGF0ZUZuOiBEYXRlVmFsaWRhdG9yO1xuICAgIGFwaTogSURwRGF5UGlja2VyQXBpO1xuICAgIHNlbGVjdEV2ZW50OiB0eXBlb2YgU2VsZWN0RXZlbnQ7XG4gICAgX2FyZUNhbGVuZGFyc1Nob3duOiBib29sZWFuO1xuICAgIF9zZWxlY3RlZDogTW9tZW50W107XG4gICAgX2N1cnJlbnREYXRlVmlldzogTW9tZW50O1xuICAgIGNvbnN0cnVjdG9yKGRheVBpY2tlclNlcnZpY2U6IERhdGVQaWNrZXJTZXJ2aWNlLCBkb21IZWxwZXI6IERvbUhlbHBlciwgZWxlbVJlZjogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgdXRpbHNTZXJ2aWNlOiBVdGlsc1NlcnZpY2UsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgb25DbGljaygpOiB2b2lkO1xuICAgIG9uQm9keUNsaWNrKCk6IHZvaWQ7XG4gICAgb25TY3JvbGwoKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBDYWxlbmRhclZhbHVlKTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIG9uQ2hhbmdlQ2FsbGJhY2soXzogYW55LCBjaGFuZ2VkQnlJbnB1dDogYm9vbGVhbik6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgb25Ub3VjaGVkQ2FsbGJhY2soKTogdm9pZDtcbiAgICB2YWxpZGF0ZShmb3JtQ29udHJvbDogRm9ybUNvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzO1xuICAgIHByb2Nlc3NPbkNoYW5nZUNhbGxiYWNrKHNlbGVjdGVkOiBNb21lbnRbXSB8IHN0cmluZyk6IENhbGVuZGFyVmFsdWU7XG4gICAgaW5pdFZhbGlkYXRvcnMoKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgc2V0RWxlbWVudFBvc2l0aW9uSW5Eb20oKTogdm9pZDtcbiAgICBzZXRJbnB1dEVsZW1lbnRDb250YWluZXIoKTogdm9pZDtcbiAgICBoYW5kbGVJbm5lckVsZW1lbnRDbGljayhlbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQ7XG4gICAgaW5pdCgpOiB2b2lkO1xuICAgIGlucHV0Rm9jdXNlZCgpOiB2b2lkO1xuICAgIGlucHV0Qmx1cnJlZCgpOiB2b2lkO1xuICAgIHNob3dDYWxlbmRhcnMoKTogdm9pZDtcbiAgICBoaWRlQ2FsZW5kYXIoKTogdm9pZDtcbiAgICBvblZpZXdEYXRlQ2hhbmdlKHZhbHVlOiBDYWxlbmRhclZhbHVlKTogdm9pZDtcbiAgICBkYXRlU2VsZWN0ZWQoZGF0ZTogSURhdGUsIGdyYW51bGFyaXR5OiB1bml0T2ZUaW1lLkJhc2UsIHR5cGU6IFNlbGVjdEV2ZW50LCBpZ25vcmVDbG9zZT86IGJvb2xlYW4pOiB2b2lkO1xuICAgIG9uRGF0ZUNsaWNrKCk6IHZvaWQ7XG4gICAgb25LZXlQcmVzcyhldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgbW92ZUNhbGVuZGFyVG8oZGF0ZTogU2luZ2xlQ2FsZW5kYXJWYWx1ZSk6IHZvaWQ7XG4gICAgb25MZWZ0TmF2Q2xpY2soY2hhbmdlOiBJTmF2RXZlbnQpOiB2b2lkO1xuICAgIG9uUmlnaHROYXZDbGljayhjaGFuZ2U6IElOYXZFdmVudCk6IHZvaWQ7XG4gICAgc3RhcnRHbG9iYWxMaXN0ZW5lcnMoKTogdm9pZDtcbiAgICBzdG9wR2xvYmFsTGlzdGVuZXJzKCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==